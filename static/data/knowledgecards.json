{
  "all": [
    {
      "id": "vector-databases-1",
      "type": "Introduction",
      "category": "Intro to Vector Databases",
      "categoryText": "One sentence about the category",
      "title": "Unstructured Data Objects",
      "photo": "unstructured-data-objects-card-icon.svg",
      "text": "Data without a predefined structure, making them difficult to manage conventionally...",
      "longText": "Data without a predefined structure, making them difficult to manage conventionally. Examples include text documents, images, audio, video, social media posts, and emails.",
      "link": "/developers/weaviate/quickstart",
      "bloglink": "https://weaviate.io/blog/understand-your-unstructured-data#intro",
      "blogTitle": "Understand Your Unstructured Data",
      "bloglink2": "https://weaviate.io/blog/the-ai-first-database-ecosystem#were-awash-in-unstructured-data",
      "blogTitle2": "The AI-First Database Ecosystem",
      "tags": ["Vector Databases", "Weaviate", "Image"],
      "cardImage": "unstructured-data-objects.jpg",
      "next": "/learn/knowledgecards/vector",
      "previous": "/learn/knowledgecards/vector-database"
    },
    {
      "id": "vector-databases-2",
      "type": "Introduction",
      "category": "Intro to Vector Databases",
      "title": "Vector",
      "photo": "vector-card-icon.svg",
      "text": "A quantity having both magnitude and direction represented by an array of numerical values...",
      "longText": "A quantity having both magnitude and direction represented by an array of numerical values.",
      "link": "/developers/weaviate/quickstart",
      "doclink": "https://weaviate.io/developers/weaviate/search/similarity#search-with-a-vector",
      "docTitle": "Search with a Vector",
      "tags": ["Vector Databases", "Weaviate", "Image"],
      "cardImage": "vector.jpg",
      "next": "/learn/knowledgecards/vector-embedding",
      "previous": "/learn/knowledgecards/unstructured-data-objects"
    },
    {
      "id": "vector-databases-3",
      "type": "Introduction",
      "category": "Intro to Vector Databases",
      "title": "Vector Embedding",
      "photo": "vector-embedding-card-icon.svg",
      "text": "Numerical representations of objects, such as words or images, in a vector space...",
      "longText": "Numerical representations of objects, such as words or images, in a vector space. These representations capture semantic relationships and are used in machine-learning tasks.",
      "link": "/developers/weaviate/quickstart",
      "bloglink": "https://weaviate.io/blog/vector-embeddings-explained",
      "blogTitle": "Vector Embeddings Explained",
      "bloglink2": "https://weaviate.io/blog/distance-metrics-in-vector-search#vectors-in-multidimensional-space",
      "blogTitle2": "Distance Metrics in Vector Search",
      "tags": ["Vector Databases", "Weaviate", "Image"],
      "cardImage": "vector-embedding.jpg",
      "next": "/learn/knowledgecards/embeddings-model",
      "previous": "/learn/knowledgecards/vector"
    },
    {
      "id": "vector-databases-4",
      "type": "Introduction",
      "category": "Intro to Vector Databases",
      "title": "Embeddings Model",
      "photo": "embed-model-card-icon.svg",
      "text": "An algorithm or model that transforms objects (like words) into vector embeddings...",
      "longText": "An algorithm or model that transforms objects (like words) into vector embeddings. This enables capturing contextual and semantic information.",
      "link": "/developers/weaviate/quickstart",
      "bloglink": "https://weaviate.io/blog/vector-embeddings-explained",
      "blogTitle": "Vector Embeddings Explained",
      "doclink": "https://weaviate.io/developers/weaviate/modules/retriever-vectorizer-modules",
      "docTitle": "Retriever Vectorizer Modules",
      "videolink": "https://www.youtube.com/watch?v=lpdN3aw-yTg",
      "videoTitle": "Vector embedding models for AI",
      "tags": ["Vector Databases", "Weaviate", "Image"],
      "cardImage": "embeddings-model.jpg",
      "next": "/learn/knowledgecards/vectorbased-index",
      "previous": "/learn/knowledgecards/vector-embedding"
    },
    {
      "id": "vector-databases-5",
      "type": "Introduction",
      "category": "Intro to Vector Databases",
      "title": "Vector-Based Index",
      "photo": "vector-index-card-icon.svg",
      "text": "A vector index is a type of data structure for efficiently storing high-dimensional vector data...",
      "longText": "A vector index is a type of data structure for efficiently storing high-dimensional vector data generated by machine learning models. Its main purpose is facilitating quick and accurate similarity searches, using algorithms like trees or hashing to reduce complexity in high-dimensional spaces.",
      "link": "/developers/weaviate/quickstart",
      "bloglink": "https://weaviate.io/blog/what-is-a-vector-database#vector-indexing-for-approximate-nearest-neighbor-approach",
      "blogTitle": "What is a Vector Database?",
      "doclink": "https://weaviate.io/developers/weaviate/concepts/vector-index",
      "docTitle": "Vector Index",
      "tags": ["Vector Databases", "Weaviate", "Image"],
      "cardImage": "vector-based-index.jpg",
      "next": "/learn/knowledgecards/vector-database",
      "previous": "/learn/knowledgecards/embeddings-model"
    },
    {
      "id": "vector-databases-6",
      "type": "Introduction",
      "category": "Intro to Vector Databases",
      "title": "Vector Database",
      "photo": "vector-database-card-icon.svg",
      "text": "A vector database indexes, stores, and provides access to structured or unstructured data...",
      "longText": "A vector database indexes, stores, and provides access to structured or unstructured data (e.g., text or images) alongside its vector embeddings, which are the data's numerical representation. It allows users to find and retrieve similar objects quickly at scale in production.",
      "link": "/developers/weaviate/quickstart",
      "bloglink": "https://weaviate.io/blog/vector-library-vs-vector-database#vector-databases",
      "blogTitle": "Vector Library vs Vector Database",
      "doclink": "https://weaviate.io/blog/vector-library-vs-vector-database#vector-databases",
      "docTitle": "Vector Library vs Vector Database",
      "tags": ["Vector Databases", "Weaviate", "Image"],
      "cardImage": "vector-database.jpg",
      "next": "/learn/knowledgecards/unstructured-data-objects",
      "previous": "/learn/knowledgecards/vectorbased-index"
    },
    {
      "id": "search-1",
      "type": "Search",
      "category": "Hybrid Search",
      "title": "Sparse Vectors",
      "photo": "hybrid-search-icon.svg",
      "text": "Sparse embeddings are generated from algorithms like BM25 and SPLADE...",
      "longText": "Sparse vectors are often high-dimensional with many zeros. Sparse embeddings are generated from algorithms like BM25 and SPLADE. These algorithms are used in keyword-based search to represent text documents.",
      "link": "/developers/weaviate/quickstart",
      "bloglink": "https://weaviate.io/blog/hybrid-search-explained#sparse-and-dense-vectors",
      "blogTitle": "Hybrid Search Explained",
      "tags": ["Hybrid Search", "Weaviate", "Image"],
      "cardImage": "sparse-vectors.jpg",
      "next": "/learn/knowledgecards/dense-vectors",
      "previous": "/learn/knowledgecards/fusion-algorithm"
    },
    {
      "id": "search-2",
      "type": "Search",
      "category": "Hybrid Search",
      "title": "Dense Vectors",
      "photo": "dense-vectors-card-icon.svg",
      "text": "In contrast to sparse vectors, dense vectors contain mostly non-zero values and are generated from machine learning models like GloVe and Transformers...",
      "longText": "In contrast to sparse vectors, dense vectors contain mostly non-zero values and are generated from machine learning models like GloVe and Transformers. These vectors capture the semantic meaning of text and are used in vector search techniques.",
      "link": "/developers/weaviate/quickstart",
      "bloglink": "https://weaviate.io/blog/hybrid-search-explained#sparse-and-dense-vectors",
      "blogTitle": "Hybrid Search Explained",
      "tags": ["Hybrid Search", "Weaviate", "Image"],
      "cardImage": "dense-vectors.jpg",
      "next": "/learn/knowledgecards/bm25bm25f",
      "previous": "/learn/knowledgecards/sparse-vectors"
    },
    {
      "id": "search-3",
      "type": "Search",
      "category": "Hybrid Search",
      "title": "BM25/BM25F",
      "photo": "bm25-card-icon.svg",
      "text": "BM25 is a ranking function used by search engines to estimate the relevance of documents to a given search query. It is part of the family of probabilistic information retrieval models...",
      "longText": "BM25 is a ranking function used by search engines to estimate the relevance of documents to a given search query. It is part of the family of probabilistic information retrieval models. BM25F is a variant of BM25 that can handle fields with different weights, such as title and body in documents.",
      "link": "/developers/weaviate/quickstart",
      "bloglink": "https://weaviate.io/blog/hybrid-search-explained#bm25",
      "blogTitle": "Hybrid Search Explained",
      "doclink": "https://weaviate.io/developers/weaviate/api/graphql/search-operators#bm25",
      "docTitle": "Search Operators",
      "tags": ["Hybrid Search", "Weaviate", "Image"],
      "cardImage": "BM25-BM25F.jpg",
      "next": "/learn/knowledgecards/alpha-parameter",
      "previous": "/learn/knowledgecards/dense-vectors"
    },
    {
      "id": "search-4",
      "type": "Search",
      "category": "Hybrid Search",
      "title": "Alpha Parameter",
      "photo": "alpha-parameter-card-icon.svg",
      "text": "This is an optional parameter in hybrid search queries that determines the weighting of each search algorithm during the re-ranking process...",
      "longText": "This is an optional parameter in hybrid search queries that determines the weighting of each search algorithm during the re-ranking process. An alpha value of 0 gives full weight to the sparse vector (BM25), 1 gives full weight to the dense vector, and 0.5 gives equal weight to both.",
      "link": "/developers/weaviate/quickstart",
      "bloglink": "https://weaviate.io/blog/hybrid-search-for-web-developers#changing-alpha",
      "blogTitle": "Hybrid Search for Web Developers",
      "doclink": "https://weaviate.io/developers/weaviate/search/hybrid#balance-keyword-and-vector-search",
      "docTitle": "Balance Keyword and Vector Search",
      "tags": ["Hybrid Search", "Weaviate", "Image"],
      "cardImage": "alpha-parameter.jpg",
      "next": "/learn/knowledgecards/fusion-algorithm",
      "previous": "/learn/knowledgecards/bm25bm25f"
    },
    {
      "id": "search-5",
      "type": "Search",
      "category": "Hybrid Search",
      "title": "Fusion Algorithm",
      "photo": "fusion-algorithm-card-icon.svg",
      "text": "In hybrid search, the fusion algorithm combines results from keyword and vector searches into a final list of ranked search results...",
      "longText": "In hybrid search, the fusion algorithm combines results from keyword and vector searches into a final list of ranked search results. A popular fusion algorithm is called reciprocal ranked fusion, which uses the sum of the inverse of the position of the results. There are multiple types of fusion algorithms. Weaviate supports reciprocal rank fusion and relative score fusion.",
      "link": "/developers/weaviate/quickstart",
      "bloglink": "https://weaviate.io/blog/hybrid-search-fusion-algorithms",
      "blogTitle": "Hybrid Search Fusion Algorithms",
      "doclink": "https://weaviate.io/developers/weaviate/search/hybrid#change-the-fusion-method",
      "docTitle": "Change the Fusion Method",
      "tags": ["Hybrid Search", "Weaviate", "Image"],
      "cardImage": "fusion-algorithm.jpg",
      "next": "/learn/knowledgecards/sparse-vectors",
      "previous": "/learn/knowledgecards/alpha-parameter"
    },
    {
      "id": "hnsw-1",
      "type": "HNSW",
      "category": "Hierarchical Navigable Small World",
      "title": "Hierarchical Graph Structure",
      "photo": "hgs-card-icon.svg",
      "text": "HNSW utilizes a multi-layered graph structure where each layer is a graph of the data points. The top layers contain fewer points with long-range connections...",
      "longText": "HNSW utilizes a multi-layered graph structure where each layer is a graph of the data points. The top layers contain fewer points with long-range connections, and as you go down the layers, the number of points increases, and the connections become more local. This hierarchical structure allows for efficient navigation during search queries.",
      "link": "/developers/weaviate/quickstart",
      "bloglink": "https://weaviate.io/blog/ann-algorithms-vamana-vs-hnsw#hnsw-indexing--in-short",
      "blogTitle": "ANN Algorithms: Vamana vs HNSW",
      "bloglink2": "https://weaviate.io/blog/ann-algorithms-hnsw-pq#what-information-to-move-to-disk",
      "blogTitle2": "ANN Algorithms: HNSW & PQ",
      "doclink": "https://weaviate.io/developers/weaviate/introduction#how-does-weaviate-work",
      "docTitle": "How Does Weaviate Work?",
      "tags": ["HNSW", "Weaviate", "Image"],
      "cardImage": "hierarchical-graph-structure.jpg",
      "next": "/learn/knowledgecards/ann-approximate-nearest-neighbor",
      "previous": "/learn/knowledgecards/graphbased-index"
    },
    {
      "id": "hnsw-2",
      "type": "HNSW",
      "category": "Hierarchical Navigable Small World",
      "title": "ANN - Approximate Nearest Neighbor",
      "photo": "ann-card-icon.svg",
      "text": "ANN algorithms calculate the approximate nearest neighbors to a query, as opposed to kNN algorithms, which calculate the true nearest neighbors...",
      "longText": "ANN algorithms calculate the approximate nearest neighbors to a query, as opposed to kNN algorithms, which calculate the true nearest neighbors. ANN algorithms enable the quick and efficient identification of the closest data points at scale. This makes ANN suitable for big data where speed matters more than perfect accuracy.",
      "link": "/developers/weaviate/quickstart",
      "bloglink": "https://weaviate.io/blog/why-is-vector-search-so-fast",
      "blogTitle": "Why is Vector Search so Fast?",
      "bloglink2": "https://weaviate.io/blog/crud-support-in-weaviate",
      "blogTitle2": "CRUD Support in Weaviate",
      "doclink": "https://weaviate.io/developers/weaviate/concepts/indexing#ann-indexing",
      "docTitle": "ANN Indexing",
      "tags": ["HNSW", "Weaviate", "Image"],
      "cardImage": "ann-approximate-nearest-neighbor.jpg",
      "next": "/learn/knowledgecards/layered-navigation",
      "previous": "/learn/knowledgecards/hierarchical-graph-structure"
    },
    {
      "id": "hnsw-3",
      "type": "HNSW",
      "category": "Hierarchical Navigable Small World",
      "title": "Layered Navigation",
      "photo": "layered-navigation-card-icon.svg",
      "text": "During a search, HNSW starts at the topmost layer and makes 'big jumps' across the graph to quickly move closer to the target region...",
      "longText": "During a search, HNSW starts at the topmost layer and makes 'big jumps' across the graph to quickly move closer to the target region. As it moves down the layers, the search becomes more refined, with smaller, more local jumps until the nearest neighbors are identified in the bottom layer.",
      "link": "/developers/weaviate/quickstart",
      "doclink": "https://weaviate.io/developers/weaviate/concepts/vector-index#hierarchical-navigable-small-world-hnsw-index",
      "docTitle": "HNSW Index",
      "tags": ["HNSW", "Weaviate", "Image"],
      "cardImage": "layered-navigation.jpg",
      "next": "/learn/knowledgecards/graphbased-index",
      "previous": "/learn/knowledgecards/ann-approximate-nearest-neighbor"
    },
    {
      "id": "hnsw-4",
      "type": "HNSW",
      "category": "Hierarchical Navigable Small World",
      "title": "Graph-Based Index",
      "photo": "graph-based-card-icon.svg",
      "text": "HNSW is a graph-based indexing technique, meaning that it organizes the data points in a graph structure rather than traditional tree-based or hash-based structures...",
      "longText": "HNSW is a graph-based indexing technique, meaning that it organizes the data points in a graph structure rather than traditional tree-based or hash-based structures. This graph-based approach is key to its performance in high-dimensional vector space searches.",
      "link": "/developers/weaviate/quickstart",
      "bloglink": "https://weaviate.io/blog/why-is-vector-search-so-fast",
      "blogTitle": "Why is Vector Search so Fast?",
      "doclink": "https://weaviate.io/developers/weaviate/concepts/vector-index#hierarchical-navigable-small-world-hnsw-index",
      "docTitle": "HNSW Index",
      "videolink": "",
      "videoTitle": "",
      "tags": ["HNSW", "Weaviate", "Image"],
      "cardImage": "graph-based-index.jpg",
      "next": "/learn/knowledgecards/hierarchical-graph-structure",
      "previous": "/learn/knowledgecards/layered-navigation"
    },
    {
      "id": "rag-1",
      "type": "RAG",
      "category": "Multimodal RAG",
      "title": "Cross Modal Reasoning",
      "photo": "cross-card-icon.svg",
      "text": "Cross-modal reasoning refers to the ability to make connections by integrating information from different modalities or sources including text, images, audio and video...",
      "longText": "Cross-modal reasoning refers to the ability to make connections by integrating information from different modalities or sources including text, images, audio and video. It involves leveraging knowledge from one modality to understand or reason about data from another modality.",
      "link": "/developers/weaviate/quickstart",
      "tags": ["RAG", "Weaviate", "Image"],
      "cardImage": "cross-modal-reasoning.jpg",
      "next": "/learn/knowledgecards/multimodal-embeddings-models",
      "previous": "/learn/knowledgecards/multimodal-rag"
    },
    {
      "id": "rag-2",
      "type": "RAG",
      "category": "Multimodal RAG",
      "title": "Multimodal Embeddings Models",
      "photo": "multimodal-card-icon.svg",
      "text": "Multimodal Embeddings Models produce a joint embedding space for multimodal data that understands text, images, audio and more...",
      "longText": "Multimodal Embeddings Models produce a joint embedding space for multimodal data that understands text, images, audio and more. Objects that are similar are closer together and dissimilar objects are farther apart, this means that the model preserves semantic similarity within and across modalities.",
      "link": "/developers/weaviate/quickstart",
      "bloglink": "https://weaviate.io/blog/multimodal-models",
      "blogTitle": "Multimodal Embedding Models",
      "tags": ["RAG", "Weaviate", "Image"],
      "cardImage": "multimodal-embeddings-models.jpg",
      "next": "/learn/knowledgecards/multimodal-contrastive-finetuning",
      "previous": "/learn/knowledgecards/cross-modal-reasoning"
    },
    {
      "id": "rag-3",
      "type": "RAG",
      "category": "Multimodal RAG",
      "title": "Multimodal Contrastive Finetuning",
      "photo": "contrastive-card-icon.svg",
      "text": "Multimodal Embeddings Models produce a joint embedding space for multimodal data that understands text, images, audio and more...",
      "longText": "Multimodal Embeddings Models produce a joint embedding space for multimodal data that understands text, images, audio and more. Objects that are similar are closer together and dissimilar objects are farther apart, this means that the model preserves semantic similarity within and across modalities.",
      "link": "/developers/weaviate/quickstart",
      "tags": ["RAG", "Weaviate", "Image"],
      "cardImage": "multimodal-contrastive-finetuning.jpg",
      "next": "/learn/knowledgecards/anytoany-search",
      "previous": "/learn/knowledgecards/multimodal-embeddings-models"
    },
    {
      "id": "rag-4",
      "type": "RAG",
      "category": "Multimodal RAG",
      "title": "Any-to-any Search",
      "photo": "any-search-card-icon.svg",
      "text": "In any-to-any search we can pass in as a query any modality the model understands and use it to perform vector similarity search...",
      "longText": "In any-to-any search we can pass in as a query any modality the model understands and use it to perform vector similarity search in multimodal embedding space, getting back objects of any other modality that are similar in concept.",
      "link": "/developers/weaviate/quickstart",
      "tags": ["RAG", "Weaviate", "Image"],
      "cardImage": "any-to-any-search.jpg",
      "next": "/learn/knowledgecards/multimodal-rag",
      "previous": "/learn/knowledgecards/multimodal-contrastive-finetuning"
    },
    {
      "id": "rag-5",
      "type": "RAG",
      "category": "Multimodal RAG",
      "title": "Multimodal RAG",
      "photo": "rag-card-icon.svg",
      "text": "Multimodal RAG involves retrieving from a multimodal knowledge base and then generation using a large multimodal model by...",
      "longText": "Multimodal RAG involves retrieving from a multimodal knowledge base and then generation using a large multimodal model by generating text or images grounded in the retrieved context, which can include images, text, audio, and other modalities.",
      "link": "/developers/weaviate/quickstart",
      "bloglink": "https://weaviate.io/blog/multimodal-rag#multimodal-retrieval-augmented-generationmmrag",
      "blogTitle": "Multimodal Retrieval Augmented Generation (MMRAG)",
      "doclink": "https://weaviate.io/developers/weaviate/api/graphql/search-operators#multimodal-search",
      "docTitle": "Multimodal Search",
      "tags": ["RAG", "Weaviate", "Image"],
      "cardImage": "multimodal-rag.jpg",
      "next": "/learn/knowledgecards/cross-modal-reasoning",
      "previous": "/learn/knowledgecards/anytoany-search"
    },
    {
      "id": "databases-1",
      "type": "Databases",
      "category": "Databases",
      "title": "Graph Database",
      "photo": "graph-database-icon.svg",
      "text": "A graph database stores data in nodes and edges, representing entities and their relationships. It's optimized for...",
      "longText": "A graph database stores data in nodes and edges, representing entities and their relationships. It's optimized for querying connections and patterns within the data, making it powerful for network, social, and recommendation systems.",
      "link": "/developers/weaviate/quickstart",
      "doclink": "https://weaviate.io/developers/weaviate/more-resources/performance#cost-of-resolving-referencing",
      "docTitle": "Cost of resolving referencing",
      "tags": ["Databases", "Weaviate", "Image"],
      "cardImage": "graph-database.jpg",
      "next": "/learn/knowledgecards/inverted-indexes",
      "previous": "/learn/knowledgecards/pq"
    },
    {
      "id": "databases-2",
      "type": "Databases",
      "category": "Databases",
      "title": "Inverted Indexes",
      "photo": "inverted-indexes-icon.svg",
      "text": "An inverted index is a database indexing structure that maps keywords to their locations in documents...",
      "longText": "An inverted index is a database indexing structure that maps keywords to their locations in documents, enabling fast full-text searches by listing all documents containing a given word, optimizing retrieval times. In Weaviate, it's used for keyword searches and fast filtering.",
      "link": "/developers/weaviate/quickstart",
      "doclink": "https://weaviate.io/developers/weaviate/more-resources/performance#inverted-index",
      "docTitle": "Inverted index",
      "doclink2": "https://weaviate.io/developers/weaviate/concepts/indexing#inverted-index",
      "docTitle2": "Indexing",
      "tags": ["Databases", "Weaviate", "Image"],
      "cardImage": "inverted-indexes.jpg",
      "next": "/learn/knowledgecards/sharding",
      "previous": "/learn/knowledgecards/graph-database"
    },
    {
      "id": "databases-3",
      "type": "Databases",
      "category": "Databases",
      "title": "Sharding",
      "photo": "sharding-icon.svg",
      "text": "Sharding is splitting a database into smaller, faster, more easily managed parts called shards...",
      "longText": "Sharding is splitting a database into smaller, faster, more easily managed parts called shards. Each shard is a self-contained unit with a subset of data, allowing for distribution across servers or data centers for improved performance and scalability.",
      "link": "/developers/weaviate/quickstart",
      "doclink": "https://weaviate.io/developers/weaviate/starter-guides/schema#sharding",
      "docTitle": "Sharding",
      "doclink2": "https://weaviate.io/developers/weaviate/concepts/replication-architecture#replication-vs-sharding",
      "docTitle2": "Replication vs Sharding",
      "tags": ["Databases", "Weaviate", "Image"],
      "cardImage": "sharding.jpg",
      "next": "/learn/knowledgecards/multi-tenancy",
      "previous": "/learn/knowledgecards/inverted-indexes"
    },
    {
      "id": "databases-4",
      "type": "Databases",
      "category": "Databases",
      "title": "Multi Tenancy",
      "photo": "multi-tenancy-icon.svg",
      "text": "With multi-tenancy, a single database instance serves multiple clients or 'tenants'...",
      "longText": "With multi-tenancy, a single database instance serves multiple clients or 'tenants' simultaneously, while ensuring that each tenant's data remains isolated and secure. It also enables efficient resource use and cost savings over large datasets at scale.",
      "link": "/developers/weaviate/quickstart",
      "bloglink": "https://weaviate.io/blog/multi-tenancy-vector-search",
      "blogTitle": "Multi-tenancy and Vector Search",
      "doclink": "https://weaviate.io/developers/weaviate/manage-data/read-all-objects#read-all-objects---multi-tenant-collections",
      "docTitle": "Read All Objects - Multi-tenant collections",
      "tags": ["Databases", "Weaviate", "Image"],
      "cardImage": "multi-tenancy.jpg",
      "next": "/learn/knowledgecards/relational-database",
      "previous": "/learn/knowledgecards/sharding"
    },
    {
      "id": "databases-5",
      "type": "Databases",
      "category": "Databases",
      "title": "Relational Database",
      "photo": "relational-database-icon.svg",
      "text": "A relational database organizes data into tables linked by relationships...",
      "longText": "A relational database organizes data into tables linked by relationships, enabling complex queries like finding students with both cats and dogs. It uses SQL for structured, precise data management, optimizing operations like filtering and joining for efficient data retrieval.",
      "link": "/developers/weaviate/quickstart",
      "tags": ["Databases", "Weaviate", "Image"],
      "cardImage": "relational-database.jpg",
      "next": "/learn/knowledgecards/pq",
      "previous": "/learn/knowledgecards/multi-tenancy"
    },
    {
      "id": "databases-6",
      "type": "Databases",
      "category": "Databases",
      "title": "PQ",
      "photo": "pq-card-icon.svg",
      "text": "Product quantization (PQ) is a compression technique for vectors, reducing memory usage by...",
      "longText": "Product quantization (PQ) is a compression technique for vectors, reducing memory usage by up to 90%. It's a lossy algorithm, meaning it trades some accuracy for significant memory savings. However, Weaviate employs a rescoring technique to reduce the loss of recall.",
      "link": "/developers/weaviate/quickstart",
      "bloglink": "https://weaviate.io/blog/pq-rescoring",
      "blogTitle": "PQ Rescoring",
      "doclink": "https://weaviate.io/developers/weaviate/concepts/vector-quantization#pq-compression-process",
      "docTitle": "PQ compression process",
      "tags": ["Databases", "Weaviate", "Image"],
      "cardImage": "pq.jpg",
      "next": "/learn/knowledgecards/graph-database",
      "previous": "/learn/knowledgecards/relational-database"
    },
    {
      "id": "llms-1",
      "type": "LLMS",
      "category": "Large Language Models",
      "title": "Large Language Model (LLM)",
      "photo": "large-language-model-icon.svg",
      "text": "A Large Language Model (LLM) is a machine learning model that is trained on vast text data, learning language...",
      "longText": "A Large Language Model (LLM) is a machine learning model that is trained on vast text data, learning language patterns to understand, predict and generate human-like text. It statistically models language to uniquely generate responses to queries with learned context.",
      "link": "/developers/weaviate/quickstart",
      "bloglink": "https://weaviate.io/blog/llms-and-search",
      "blogTitle": "LLMs and Search",
      "bloglink2": "https://weaviate.io/blog/rag-evaluation#llm-evaluations",
      "blogTitle2": "RAG Evaluation",
      "doclink": "https://weaviate.io/developers/weaviate/starter-guides/generative#why-generative-search",
      "docTitle": "Why generative search?",
      "tags": ["LLMs", "Weaviate", "Image"],
      "cardImage": "large-language-model.jpg",
      "next": "/learn/knowledgecards/finetuning",
      "previous": "/learn/knowledgecards/chunking"
    },
    {
      "id": "llms-2",
      "type": "LLMS",
      "category": "Large Language Models",
      "title": "Finetuning",
      "photo": "finetuning-icon.svg",
      "text": "Fine-tuning is a process where a pre-trained machine learning model is further trained on a specific dataset...",
      "longText": "Fine-tuning is a process where a pre-trained machine learning model is further trained on a specific dataset to specialize its knowledge or skills for a particular task or domain. This improves the model's performance on the related task while being more cost-efficient than training it from scratch.",
      "link": "/developers/weaviate/quickstart",
      "bloglink": "https://weaviate.io/blog/multimodal-models#2-model-architecture",
      "blogTitle": "Multimodal Models",
      "tags": ["LLMs", "Weaviate", "Image"],
      "cardImage": "finetuning.jpg",
      "next": "/learn/knowledgecards/multimodal",
      "previous": "/learn/knowledgecards/large-language-model-llm"
    },
    {
      "id": "llms-3",
      "type": "LLMS",
      "category": "Large Language Models",
      "title": "Multi-modal",
      "photo": "multi-modal-icon.svg",
      "text": "Multi-modal learning involves integrating various data types like images, text, audio, and sensory inputs...",
      "longText": "Multi-modal learning involves integrating various data types like images, text, audio, and sensory inputs to create models that understand and process information like humans, recognizing patterns and context across different modes for different types of use-cases, like e-commerce.",
      "link": "/developers/weaviate/quickstart",
      "bloglink": "https://weaviate.io/blog/multimodal-models",
      "blogTitle": "Multimodal Embedding Models",
      "bloglink2": "https://weaviate.io/blog/multimodal-rag",
      "blogTitle2": "Multimodal RAG",
      "doclink": "https://weaviate.io/developers/weaviate/api/graphql/search-operators#multimodal-search",
      "docTitle": "Multimodal Search",
      "tags": ["LLMs", "Weaviate", "Image"],
      "cardImage": "multi-modal.jpg",
      "next": "/learn/knowledgecards/embedding-model",
      "previous": "/learn/knowledgecards/finetuning"
    },
    {
      "id": "llms-4",
      "type": "LLMS",
      "category": "Large Language Models",
      "title": "Embedding model",
      "photo": "embedding-icon.svg",
      "text": "An embedding model, or vectorizer, transforms text or images into vector embeddings, capturing semantic...",
      "longText": "An embedding model, or vectorizer, transforms text or images into vector embeddings, capturing semantic meaning through statistical analysis, converting conceptual significance into numerical representations.",
      "link": "/developers/weaviate/quickstart",
      "bloglink": "https://weaviate.io/blog/vector-embeddings-explained",
      "blogTitle": "Vector Embeddings Explained",
      "doclink": "https://weaviate.io/developers/weaviate/modules/retriever-vectorizer-modules",
      "docTitle": "Retriever Vectorizer Modules",
      "videolink": "https://www.youtube.com/watch?v=lpdN3aw-yTg",
      "videoTitle": "Vector embedding models for AI",
      "tags": ["LLMs", "Weaviate", "Image"],
      "cardImage": "embedding-model.jpg",
      "next": "/learn/knowledgecards/chunking",
      "previous": "/learn/knowledgecards/multimodal"
    },
    {
      "id": "llms-5",
      "type": "LLMS",
      "category": "Large Language Models",
      "title": "Chunking",
      "photo": "chunking-icon.svg",
      "text": "Chunking is the process of dividing large texts into smaller, manageable pieces, called 'chunks'...",
      "longText": "Chunking is the process of dividing large texts into smaller, manageable pieces, called 'chunks', for storage or processing in vector databases and language models. It improves search performance and the quality of language model outputs by defining the granularity of information retrieval.",
      "link": "/developers/weaviate/quickstart",
      "bloglink": "https://weaviate.io/blog/llms-and-search#index-construction",
      "blogTitle": "LLMs and Search",
      "bloglink2": "https://weaviate.io/developers/weaviate/starter-guides/generative#chunking",
      "blogTitle2": "Chunking",
      "tags": ["LLMs", "Weaviate", "Image"],
      "cardImage": "chunking.jpg",
      "next": "/learn/knowledgecards/large-language-model-llm",
      "previous": "/learn/knowledgecards/embedding-model"
    }
  ],
  "highlights": [
    {
      "type": "Image",
      "category": "Databases",
      "title": "Sparse Vectors",
      "photo": "vector-knowledge-01.svg",
      "link": "/developers/weaviate/quickstart",
      "tags": ["Concepts", "Engineering"]
    },
    {
      "type": "Image",
      "category": "Databases",
      "title": "Sparse Vectors",
      "photo": "vector-knowledge-02.svg",
      "link": "/developers/weaviate/quickstart",
      "tags": ["Concepts", "Engineering"]
    },
    {
      "type": "Image",
      "category": "Intro to Vector Databases",
      "title": "Sparse Vectors",
      "photo": "vector-knowledge-03.svg",
      "link": "/developers/weaviate/quickstart",
      "tags": ["Concepts", "Engineering"]
    }
  ]
}
